Index: model/model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nModule containing a QuartzClassifier class that can\r\ninitialize, train, evaluate, and save a deep LSTM model using Keras.\r\n\r\n** WARNING **\r\nThis file only use for CUSTOM MODEL, adding layer, changing model behaviour, adjusting tensors\r\nTuning HYPER-PARAMETERS should be in test.py file\r\n** WARNING **\r\n\r\n\"\"\"\r\n# Import system\r\nimport os\r\nimport math\r\nimport numpy as np\r\n\r\n# Ensure reproducibility\r\nos.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'\r\nos.environ['PYTHONHASHSEED'] = '42'\r\n\r\n# Import scikit-learn and its dependencies\r\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score, confusion_matrix\r\n\r\n# import tensorflow and its dependencies\r\nfrom keras import models, layers, optimizers, losses, metrics, saving, callbacks\r\n\r\n# Import data visual library\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\nclass QuartzClassifier:\r\n\r\n    def __init__(self, output_unit=3, drop_out_rate=0.5,\r\n                 learning_rate=0.001, n_epochs=20, n_batchs=16, prediction_threshold=0.5, model=None):\r\n        \"\"\"\r\n        :type prediction_threshold: object\r\n        :param output_unit: number of classification output\r\n        :param drop_out_rate: drop out rate from the last tensor\r\n        :param learning_rate: learning rate\r\n        :param n_epochs: number of epoch\r\n        :param n_batchs: number of batch\r\n        :param prediction_threshold: Don't need to change\r\n        \"\"\"\r\n        self.output_unit = output_unit\r\n        self.drop_out_rate = drop_out_rate\r\n        self.learning_rate = learning_rate\r\n        self.n_epochs = n_epochs\r\n        self.n_batchs = n_batchs\r\n        self.prediction_threshold = prediction_threshold\r\n        self.model = model\r\n        self.history = None\r\n        self.cp_callback = None\r\n        self.y_pred = 0\r\n\r\n    def initialize(self, input_shape):\r\n        \"\"\"\r\n        Initialize the LSTM model\r\n        :rtype: None\r\n        :param input_shape: numpy array shape\r\n        \"\"\"\r\n        self.model = models.Sequential([\r\n            layers.Input(shape=input_shape, batch_size=self.n_batchs),\r\n            layers.LSTM(units=128, stateful=True, return_sequences=True),\r\n            layers.LSTM(units=64, stateful=True, return_sequences=True),\r\n            layers.LSTM(units=64, stateful=True, return_sequences=False),\r\n            layers.Dense(units=32, activation='relu'),\r\n            layers.Dropout(self.drop_out_rate),\r\n            layers.Dense(self.output_unit, activation='softmax')\r\n        ])\r\n\r\n        self.model.compile(optimizer=optimizers.SGD(learning_rate=self.learning_rate),\r\n                           loss=losses.CategoricalCrossentropy(),\r\n                           metrics=['accuracy'])\r\n\r\n        self.model.summary()\r\n\r\n    def set_checkpoint(self, checkpoint_path: str, n_sample: int, saving_rate: int = 5):\r\n        \"\"\"\r\n        Create a check point for train and saving weight for further investigate performance\r\n        See checkpoint callback usage from tensorflow document for more detail\r\n        :param n_sample: Number of sample for training\r\n        :param saving_rate: frequency of saving weight per batch\r\n        :param checkpoint_path: path for saving weight.\r\n        \"\"\"\r\n        n_batches = math.ceil(n_sample / self.n_batchs)\r\n\r\n        # Create a callback that saves the model's weights, put into list\r\n        self.cp_callback = [callbacks.ModelCheckpoint(filepath=checkpoint_path,\r\n                                                      save_weights_only=True,\r\n                                                      save_freq=saving_rate * n_batches,\r\n                                                      verbose=1)]\r\n\r\n    def train(self, X_train, X_val, y_train, y_val, verbose=2):\r\n        \"\"\"\r\n        Train the model\r\n        :param X_train: training set\r\n        :param X_val: validation set\r\n        :param y_train: label training set\r\n        :param y_val: label validation set\r\n        :param verbose: showing progress\r\n        :rtype: None\r\n        \"\"\"\r\n\r\n        if self.model is None:\r\n            raise Exception(\"Model has not been initialized. Call initialize_model() first.\")\r\n\r\n        self.history = self.model.fit(\r\n            X_train, y_train,\r\n            validation_data=(X_val, y_val),\r\n            epochs=self.n_epochs,\r\n            batch_size=self.n_batchs,\r\n            shuffle=False,\r\n            verbose=verbose,\r\n            callbacks=self.cp_callback\r\n        )\r\n\r\n    def evaluate(self, X_test, y_test):\r\n        \"\"\"\r\n        Evaluate model, print test lost, test accuracy\r\n        :param X_test: training test set\r\n        :param y_test: label test set\r\n        :rtype: tuple\r\n        :return: accuracy score, recall score, precision score\r\n        \"\"\"\r\n        test_loss, test_accuracy = self.model.evaluate(X_test, y_test, batch_size=self.n_batchs, verbose=2)\r\n\r\n        print(f\"Test lost: {test_loss}\")\r\n        print(f\"Test accuracy: {test_accuracy}\")\r\n\r\n        y_pred = self.model.predict(X_test, batch_size = self.n_batchs,verbose = 2)\r\n        print(y_pred)\r\n        y_pred = np.argmax(y_pred, axis=1)\r\n        self.y_pred = y_pred\r\n\r\n\r\n        print(y_pred)\r\n        print(self.model.predict(np.expand_dims(X_test[0], axis=0))[0].argmax())\r\n\r\n        # accuracy = accuracy_score(y_test, y_pred)\r\n        # recall = recall_score(y_test, y_pred)\r\n        # precision = precision_score(y_test, y_pred)\r\n\r\n        return\r\n\r\n    def plot_history(self):\r\n        \"\"\"\r\n        Plot the training progress\r\n        :rtype: None\r\n        \"\"\"\r\n        if self.history is None:\r\n            raise Exception(\"No training history found. Train the model first.\")\r\n\r\n        plt.plot(self.history.history['accuracy'], label='accuracy')\r\n        plt.plot(self.history.history['val_accuracy'], label='val_accuracy')\r\n        plt.xlabel('Epoch')\r\n        plt.ylabel('Accuracy')\r\n        plt.ylim([0, 1])\r\n        plt.legend(loc='lower right')\r\n        plt.title('Training and Validation Accuracy')\r\n        plt.show()\r\n\r\n    def plot_confusion_matrix(self,y_test):\r\n        \"\"\"\r\n        plot_confusion matrix\r\n        :param y_test: y_true\r\n        :param y_pred: y_prediction\r\n        :rtype: None\r\n        \"\"\"\r\n        y_test = np.argmax(y_test, axis=1)\r\n        cm = confusion_matrix(y_test, self.y_pred)\r\n        sns.heatmap(cm, annot=True, fmt='d', cmap='pink', xticklabels=range(self.output_unit),\r\n                    yticklabels=range(self.output_unit))\r\n        plt.xlabel('Predicted labels')\r\n        plt.ylabel('True labels')\r\n        plt.title('Confusion Matrix')\r\n        plt.show()\r\n\r\n    def save_model(self, folder_path_name='quartz_model'):\r\n        \"\"\"\r\n        Save model\r\n        :param folder_path_name: path to save_file\r\n        :rtype: None\r\n        \"\"\"\r\n        folder_path_name = folder_path_name + \".keras\"\r\n        saving.save_model(self.model, folder_path_name, overwrite=True)\r\n        print(f\"Model saved as: {folder_path_name}\")\r\n\r\n    def load_model(self, zip_path_name):\r\n\r\n        self.model = saving.load_model(zip_path_name)\r\n        print(\"loaded model\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/model.py b/model/model.py
--- a/model/model.py	(revision 5131ab407e835a866863bf92e900205e97662690)
+++ b/model/model.py	(date 1713496647275)
@@ -191,5 +191,7 @@
         print("loaded model")
 
 
+
+
 if __name__ == "__main__":
     pass
Index: model/data/data_preprocess.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import ast\r\nimport os\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\n# Declare variable\r\ndata_unprocessed_path = 'data/data_collected_unprocessed/'\r\n\r\n# Config panda\r\npd.set_option('display.max_columns', None)\r\n\r\n\r\ndef convert_string_to_list(string):\r\n    \"\"\"\r\n    Convert string into list\r\n    :param string:\r\n    :return: list of integer\r\n    \"\"\"\r\n    int_list = [int(item) for item in string.strip(\"[']\").split(\"', ' \")]\r\n    return int_list\r\n\r\n\r\ndef removed_error_data(dataframe):\r\n    \"\"\"\r\n    Removed row contains invalid value\r\n    :param dataframe:\r\n    :return: pandas DataFrame\r\n    \"\"\"\r\n    a = \"Error collecting data on middle finger\"\r\n    b = \"Error collecting data on thumb finger\"\r\n    c = \"Error collecting data on index finger\"\r\n    d = \"'-1',' -1',' -1'\"\r\n    dataframe = dataframe[~(dataframe.Accel.str.contains(a)) | (dataframe.Gyr.str.contains(a))]\r\n    dataframe = dataframe[~(dataframe.Accel.str.contains(b)) | (dataframe.Gyr.str.contains(b))]\r\n    dataframe = dataframe[~(dataframe.Accel.str.contains(c)) | (dataframe.Gyr.str.contains(c))]\r\n    dataframe = dataframe[~(dataframe.Accel.str.contains(d)) | (dataframe.Gyr.str.contains(d))]\r\n    dataframe = dataframe[~(dataframe.Accel.str.contains(\"Average sensor values\"))]\r\n    return dataframe\r\n\r\n\r\ndef merge_csv_file(folder_path):\r\n    \"\"\"\r\n    Merge all data collected into one big data frame\r\n    :param folder_path: input folder\r\n    :return: pandas DataFrame\r\n    \"\"\"\r\n    # List to store individual DataFrame\r\n    df_list = []\r\n\r\n\r\n    # Iterate over each file in the folder\r\n    for filename in os.listdir(folder_path):\r\n        if filename.endswith('.csv'):\r\n            # Read the CSV file into a DataFrame\r\n            file_path = os.path.join(folder_path, filename)\r\n            dataframe = pd.read_csv(file_path)\r\n\r\n            dataframe.loc[0, \"Sep\"] = True\r\n            # Data Encoding one hot encoding\r\n            dataframe= pd.get_dummies(dataframe, columns=['Label'],dtype= float)\r\n\r\n            # Append the df to the list\r\n            df_list.append(dataframe)\r\n\r\n    # Concatenate all DataFrame in the list into one big DataFrame\r\n    return pd.concat(df_list, ignore_index=True)\r\n\r\n\r\ndef convert_str_to_int(dataframe):\r\n    \"\"\"\r\n    Convert the value in the Accel and Gyr from list of string to list of int\r\n    :param dataframe: df need to change\r\n    :return: pandas DataFrame\r\n    \"\"\"\r\n    # Convert string values in lists to integers\r\n    dataframe.Accel = dataframe.Accel.apply(lambda x: convert_string_to_list(x))\r\n    dataframe.Gyr = dataframe.Gyr.apply(lambda x: convert_string_to_list(x))\r\n\r\n    return dataframe\r\n\r\n\r\ndef fix_sep_value(dataframe):\r\n    \"\"\"\r\n    Fix the duplicate True value, switching back to False.\r\n    :param dataframe: df need to change\r\n    :return: pandas DataFrame\r\n    \"\"\"\r\n    # Find the indices where 'Sep' is True\r\n    true_indices = dataframe.index[dataframe.Sep == True]\r\n\r\n    # Iterate over the indices and update the value of 'Sep' to False for adjacent True values\r\n    for idx in range(len(true_indices) - 1):\r\n        if true_indices[idx + 1] - true_indices[idx] == 1:\r\n            dataframe.at[true_indices[idx + 1], 'Sep'] = False\r\n    return dataframe\r\n\r\n\r\ndef get_data():\r\n    print(\"Merge dataset\")\r\n    df = merge_csv_file(data_unprocessed_path)\r\n    print(\"Removed NaN and duplicated\")\r\n    df = df.dropna()\r\n    df = df.drop_duplicates()\r\n    print(\"Removed Error data\")\r\n    df = removed_error_data(df)\r\n    print(\"Convert str to int\")\r\n    df = convert_str_to_int(df)\r\n    print(\"Fix sep value\")\r\n    df = fix_sep_value(df)\r\n    print(\"Done preprocessing data\")\r\n    return df\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/data/data_preprocess.py b/model/data/data_preprocess.py
--- a/model/data/data_preprocess.py	(revision 5131ab407e835a866863bf92e900205e97662690)
+++ b/model/data/data_preprocess.py	(date 1713496804728)
@@ -59,7 +59,7 @@
 
             dataframe.loc[0, "Sep"] = True
             # Data Encoding one hot encoding
-            dataframe= pd.get_dummies(dataframe, columns=['Label'],dtype= float)
+
 
             # Append the df to the list
             df_list.append(dataframe)
@@ -96,6 +96,19 @@
             dataframe.at[true_indices[idx + 1], 'Sep'] = False
     return dataframe
 
+def oversample(df):
+    classes = df.Label.value_counts().to_dict()
+    most = max(classes.values())
+    classes_list = []
+    for key in classes:
+        classes_list.append(df[df['Label'] == key])
+    classes_sample = []
+    for i in range(1,len(classes_list)):
+        classes_sample.append(classes_list[i].sample(most, replace=True))
+    df_maybe = pd.concat(classes_sample)
+    final_df = pd.concat([df_maybe,classes_list[0]], axis=0)
+    final_df = final_df.reset_index(drop=True)
+    return final_df
 
 def get_data():
     print("Merge dataset")
@@ -109,6 +122,9 @@
     df = convert_str_to_int(df)
     print("Fix sep value")
     df = fix_sep_value(df)
+    print("Oversampling")
+    df = oversample(df)
+    df = pd.get_dummies(df, columns=['Label'], dtype=float)
     print("Done preprocessing data")
     return df
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"19ddb3ba-9f8e-442b-b181-f8d4a8f757d9\" name=\"Changes\" comment=\"Done preprocessing data\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/model/quartz_model.keras\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/model/quartz_model.keras\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Phickies&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Phickies/GestureXR.git&quot;,\r\n    &quot;accountId&quot;: &quot;cf8cbfb0-171e-4f2d-9fd1-8b17f876751b&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2fIH7LP3vkPgDa8xhnD0RFbMt4Z\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"Python.data_preprocess.executor\": \"Run\",\r\n    \"Python.test.executor\": \"Run\",\r\n    \"Python.testing.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"settings.editor.selected.configurable\": \"editor.preferences.import\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-5a2391486177-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13763.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"19ddb3ba-9f8e-442b-b181-f8d4a8f757d9\" name=\"Changes\" comment=\"\" />\r\n      <created>1713481503884</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713481503884</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Relocating data files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713482763751</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713482763751</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Relocating data files\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713482811936</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713482811936</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Fixing data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713485481129</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713485481129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Fixing data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713485530273</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713485530273</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Done preprocessing data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713487957209</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713487957209</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Done preprocessing data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713488026118</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713488026118</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Done preprocessing data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713494059755</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713494059755</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Done preprocessing data\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1713494094586</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1713494094586</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"9\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Add function to change the dataset from string to int\" />\r\n    <MESSAGE value=\"Relocating data files\" />\r\n    <MESSAGE value=\"Fixing data\" />\r\n    <MESSAGE value=\"Done preprocessing data\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Done preprocessing data\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5131ab407e835a866863bf92e900205e97662690)
+++ b/.idea/workspace.xml	(date 1713495915820)
@@ -145,7 +145,15 @@
       <option name="project" value="LOCAL" />
       <updated>1713494094586</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="Done preprocessing data">
+      <option name="closed" value="true" />
+      <created>1713494984028</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1713494984028</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
